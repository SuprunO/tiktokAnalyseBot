const { chromium } = require("playwright");

async function scrapePopularMusic(region = "United States", time = 30) {
  const browser = await chromium.launch({ headless: false });
  const page = await browser.newPage();

  console.log("üåê Opening TikTok Creative Center (Popular Music)...");
  await page.goto(
    "https://ads.tiktok.com/business/creativecenter/inspiration/popular/music/pc/en",
    { waitUntil: "networkidle", timeout: 120000 }
  );

  await page.waitForTimeout(8000);

  // 1Ô∏è‚É£ –ù–∞—Ç–∏—Å–∫–∞—î–º–æ –Ω–∞ –¥—Ä–æ–ø–¥–∞—É–Ω —Ä–µ–≥—ñ–æ–Ω—É
  console.log("üü† Opening region dropdown...");
  const regionDropdownTrigger = await page.$('div[class*=index-mobile_locationSelectContainer]');
  if (regionDropdownTrigger) {
    await regionDropdownTrigger.click({ timeout: 5000 });
    console.log("‚úÖ Region dropdown opened.");
  } else {
    console.warn("‚ö†Ô∏è Region dropdown trigger not found! Keeping default region.");
  }

  await page.waitForTimeout(2000);

  // 2Ô∏è‚É£ –í–≤–æ–¥–∏–º–æ —Ä–µ–≥—ñ–æ–Ω —É —ñ–Ω–ø—É—Ç
  console.log(`‚å®Ô∏è Typing region: ${region}...`);
  await page.waitForSelector('input[placeholder="Start typing or select from the list"]', { timeout: 10000 });
  const regionInput = await page.$('input[placeholder="Start typing or select from the list"]');
  if (regionInput) {
    await regionInput.click();
    await regionInput.fill(region);
    await page.waitForTimeout(1500);

    await page.keyboard.press('ArrowDown');
    await page.keyboard.press('Enter');
    console.log(`‚úÖ Region set to "${region}"`);
  } else {
    console.warn("‚ö†Ô∏è Region input not found after opening dropdown. Keeping default.");
  }

  await page.waitForTimeout(5000);

  // 3Ô∏è‚É£ –í–∏–±–∏—Ä–∞—î–º–æ –ø–µ—Ä—ñ–æ–¥ —á–∞—Å—É
  await selectTime(page, time);

  // 4Ô∏è‚É£ –ö–ª—ñ–∫ –ø–æ –∫–Ω–æ–ø—Ü—ñ ¬´See More¬ª —ñ —Å–∫—Ä–æ–ª
  console.log("üü† Trying to load all music entries with 'See More' and scrolling...");
  for (let i = 0; i < 15; i++) {
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–Ω–æ–ø–∫—É –∑–∞ —Ç–µ–∫—Å—Ç–æ–º
    const seeMoreBtn = await page.$('[data-testid="cc_contentArea_viewmore_btn"]>div');

    if (seeMoreBtn) {
      const isVisible = await seeMoreBtn.isVisible();
      const isEnabled = await seeMoreBtn.isEnabled();

      if (isVisible && isEnabled) {
        console.log("‚úÖ 'See More' button found. Clicking...");
        await seeMoreBtn.click();
        await page.waitForTimeout(4000);
      } else {
        console.log("‚ö†Ô∏è 'See More' button not clickable. Skipping to scroll.");
      }
    } else {
      console.log("‚ÑπÔ∏è No 'See More' button found. Performing scroll instead.");
    }

    await page.evaluate(() => window.scrollTo(0, document.body.scrollHeight));
    await page.waitForTimeout(3000);
  }

  // 5Ô∏è‚É£ –ó–±—ñ—Ä –¥–∞–Ω–∏—Ö
  console.log("üîé Extracting music entries...");
  const musicList = await page.evaluate(() => {
    const results = [];
    const cards = document.querySelectorAll('div[class*="cardWrapper"]');

    cards.forEach((card, idx) => {
      const rankEl = card.querySelector('span[class*="rankingIndex"]');
      const titleEl = card.querySelector('span[class*="musicName"]');
      const artistEl = card.querySelector('span[class*="autherName"]');

      const rank = rankEl ? parseInt(rankEl.textContent.trim(), 10) : idx + 1;
      const song = titleEl ? titleEl.textContent.trim() : '';
      const artist = artistEl ? artistEl.textContent.trim() : '';

      if (song && artist) {
        results.push({ rank, song, artist });
      }
    });

    return results;
  });

  if (!musicList.length) {
    console.log("‚ùå No music entries found. Check selectors!");
  } else {
    console.log(`‚úÖ Found ${musicList.length} music entries!`);
    musicList.slice(0, 20).forEach((m) => {
      console.log(`#${m.rank}: "${m.song}" by ${m.artist}`);
    });
  }

  await browser.close();
  console.log("\n‚úÖ Done.");
}

// ‚úÖ –î–æ–ø–æ–º—ñ–∂–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –≤–∏–±–æ—Ä—É —á–∞—Å—É
async function selectTime(page, time) {
  console.log(`üü† Selecting time: Last ${time} days...`);

  try {
    await page.waitForSelector('[data-testid="cc_single_select_undefined"]', { timeout: 10000 });
    await page.click('[data-testid="cc_single_select_undefined"]');
    await page.waitForTimeout(2000);

    let timeOption = await page.$(`text="Last ${time} Days"`);

    if (!timeOption) {
      console.warn(`‚ö†Ô∏è Text option 'Last ${time} Days' not found. Trying fallback selector...`);
      timeOption = await page.$('[data-option-id="SelectOption82"]');
    }

    if (timeOption) {
      await timeOption.click();
      console.log(`‚úÖ Time set to Last ${time} days`);
    } else {
      console.warn(`‚ö†Ô∏è Time option for '${time} Days' not found. Keeping default.`);
    }
  } catch (err) {
    console.error("‚ùå Error selecting time:", err);
  }

  await page.waitForTimeout(3000);
}

// üü¢ –ó–∞–ø—É—Å–∫ –∑—ñ —Å–≤–æ—ó–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:
scrapePopularMusic("United States", 30)
  .catch(console.error);

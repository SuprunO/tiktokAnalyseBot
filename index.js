require("dotenv").config();

const express = require("express");
const { chromium } = require("playwright");
const TelegramBot = require("node-telegram-bot-api");
const OpenAI = require("openai");
const fs = require("fs/promises");

const TELEGRAM_TOKEN = process.env.TELEGRAM_TOKEN;
const OPENAI_KEY = process.env.OPENAI_API_KEY;
const RENDER_EXTERNAL_URL = process.env.RENDER_EXTERNAL_URL;
const PORT = process.env.PORT || 3000;
const MAX_CONCURRENT_SCRAPES = 2;

if (!TELEGRAM_TOKEN || !OPENAI_KEY) {
  console.error("‚ùó Please set TELEGRAM_TOKEN and OPENAI_API_KEY in .env");
  process.exit(1);
}

// ==============================
// EXPRESS APP SETUP
// ==============================
const app = express();
app.use(express.json());
app.get("/", (req, res) => res.send("‚úÖ Bot is running."));

// ==============================
// OPENAI CLIENT
// ==============================
const openai = new OpenAI({ apiKey: OPENAI_KEY });

// ==============================
// TELEGRAM BOT SETUP
// ==============================
let bot;
let activeScrapes = 0;
const userStates = {};

if (RENDER_EXTERNAL_URL) {
  console.log("üü¢ Running in Webhook mode");
  bot = new TelegramBot(TELEGRAM_TOKEN, { polling: false });
  app.post(`/bot${TELEGRAM_TOKEN}`, (req, res) => {
    bot.processUpdate(req.body);
    res.sendStatus(200);
  });
} else {
  console.log("üü† Running in Polling mode");
  bot = new TelegramBot(TELEGRAM_TOKEN, { polling: true });
  console.log("‚úÖ Polling started.");
}

app.listen(PORT, "0.0.0.0", () => {
  console.log(`üöÄ Express server listening on port ${PORT}`);
  if (RENDER_EXTERNAL_URL) {
    bot
      .setWebHook(`${RENDER_EXTERNAL_URL}/bot${TELEGRAM_TOKEN}`)
      .then(() =>
        console.log(
          `‚úÖ Webhook set to ${RENDER_EXTERNAL_URL}/bot${TELEGRAM_TOKEN}`
        )
      )
      .catch(console.error);
  }
});

// ==============================
// HELPERS
// ==============================
async function cleanupTempFiles() {
  const files = ["captcha_detected.png", "error_screenshot.png"];
  for (const file of files) {
    try {
      await fs.unlink(file);
    } catch {}
  }
}

function isValidPeriod(value) {
  return [7, 30, 120].includes(value);
}

function formatTable(data) {
  if (!data.length) return "‚ùó –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö —É Creative Center.";
  return data
    .slice(0, 5)
    .map(
      (item, idx) =>
        `#${idx + 1}\n–°–ª–æ–≤–æ: ${item.keyword}\n–†–∞–Ω–≥: ${
          item.rank
        }\n–ü–æ–ø—É–ª—è—Ä–Ω—ñ—Å—Ç—å: ${item.popularity}\n–ó–º—ñ–Ω–∞ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—ñ: ${
          item.popularityChange
        }\nCTR: ${item.ctr}\nCVR: ${item.cvr}\nCPA: ${
          item.cpa
        }\nContent Gap Score: ${item.contentGapScore}\n`
    )
    .join("\n");
}

function formatHashtagList(data) {
  if (!data.length) return "‚ùó –•–µ—à—Ç–µ–≥–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.";
  return data
    .slice(0, 20)
    .map(
      (h) =>
        `#${h.hashtag}\n–†–∞–Ω–≥: ${h.rank}\n–ü–æ—Å—Ç—ñ–≤: ${h.posts.toLocaleString()}`
    )
    .join("\n\n");
}

function formatMusicList(data) {
  if (!data.length) return "‚ùó –¢—Ä–µ–∫–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.";
  return data
    .slice(0, 20)
    .map((m) => `#${m.rank}: "${m.song}" ‚Äì ${m.artist}`)
    .join("\n\n");
}

async function waitForSelectorWithRetry(
  page,
  selector,
  maxRetries = 3,
  delay = 5000
) {
  for (let i = 0; i < maxRetries; i++) {
    try {
      console.log(`üîÑ Attempt ${i + 1} to find selector: ${selector}`);
      await page.waitForSelector(selector, { timeout: 10000 });
      console.log(`‚úÖ Selector found: ${selector}`);
      return;
    } catch (err) {
      console.warn(`‚ö†Ô∏è Selector not found on attempt ${i + 1}`);
      if (i < maxRetries - 1) {
        await page.waitForTimeout(delay);
      } else {
        throw new Error(
          `‚ùå Failed to find selector ${selector} after ${maxRetries} attempts`
        );
      }
    }
  }
}

// ==============================
// SCRAPER FUNCTIONS
// ==============================

async function scrapeTikTokKeywordInsights(keyword, period = 7) {
  if (activeScrapes >= MAX_CONCURRENT_SCRAPES)
    throw new Error("Too many concurrent scrapes.");
  activeScrapes++;
  let browser;
  try {
    browser = await chromium.launch({
      headless: false,
      args: ["--no-sandbox"],
    });
    const page = await browser.newPage();

    console.log("üåê Opening TikTok Keyword Page...");
    await page.goto(
      "https://ads.tiktok.com/business/creativecenter/keyword-insights/pc/en",
      {
        waitUntil: "domcontentloaded",
        timeout: 120000,
      }
    );

 // –í–∏–±—ñ—Ä –ø–µ—Ä—ñ–æ–¥—É
const periodMap = {
  7: "Last 7 days",
  30: "Last 30 days",
  120: "Last 120 days",
};
const periodText = periodMap[period] || "Last 7 days";

await page.waitForLoadState("domcontentloaded");
await page.waitForTimeout(15000);

console.log("üßπ Trying to skip guide modal...");
await page.click("[class*='guide-modal-footer-skip-btn']").catch(() => {
  console.warn("‚ö†Ô∏è Skip guide button not found or already closed");
});

console.log("üîç Waiting for #keywordPeriod in DOM...");
await page.waitForSelector("#keywordPeriod", { timeout: 10000 }).catch(() => {
  throw new Error("‚ùå #keywordPeriod not found in DOM at all");
});

// üß™ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∏–ª—ñ–≤
console.log("üî¨ Checking #keywordPeriod styles...");
const periodDebug = await page.evaluate(() => {
  const el = document.getElementById("keywordPeriod");
  if (!el) return "‚ùå Not found";
  const style = window.getComputedStyle(el);
  const rect = el.getBoundingClientRect();
  return {
    pointerEvents: style.pointerEvents,
    visibility: style.visibility,
    display: style.display,
    top: rect.top,
    left: rect.left,
    width: rect.width,
    height: rect.height,
  };
});
console.log("üßæ keywordPeriod style debug:", periodDebug);

// üíæ –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å–∫—Ä—ñ–Ω—à–æ—Ç—É
await page.screenshot({ path: "/mnt/data/render_keywordPeriod_debug.png", fullPage: true });
console.log("üì∏ Screenshot saved as render_keywordPeriod_debug.png");

// üöÄ –ü—Ä–æ–±—É—î–º–æ –∫–ª—ñ–∫
if (
  periodDebug.pointerEvents !== "none" &&
  periodDebug.visibility !== "hidden" &&
  periodDebug.display !== "none" &&
  periodDebug.width > 0 &&
  periodDebug.height > 0
) {
  console.log("üñ± Attempting to click #keywordPeriod...");
  await page.evaluate(() => {
    document.getElementById("keywordPeriod").scrollIntoView({ behavior: "auto", block: "center" });
  });
  await page.waitForTimeout(1000);
  await page.click("#keywordPeriod", { timeout: 5000 });
  console.log("‚úÖ Click successful");
} else {
  throw new Error("‚ùå #keywordPeriod is not visible/clickable");
}


// –í–∏–±—Ä–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–π –ø–µ—Ä—ñ–æ–¥
const option = await page.$(`text="${periodText}"`);
if (option) {
  await option.click();
} else {
  console.warn(`‚ö†Ô∏è Period option not found: ${periodText}`);
}
await page.waitForTimeout(2000);


    // –ü–æ—à—É–∫ –∫–ª—é—á–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞
    console.log(`‚å®Ô∏è Typing keyword: ${keyword}...`);
    await page.fill('input[placeholder="Search by keyword"]', keyword);
    await page.keyboard.press("Enter");
    await page.waitForTimeout(5000);

    await page.waitForSelector(".byted-Table-Body", { timeout: 30000 });

    const data = await page.evaluate(() => {
      const rows = document.querySelectorAll(".byted-Table-Body tr");
      return Array.from(rows).map((row) => {
        const cells = Array.from(row.querySelectorAll("td, th")).map((td) =>
          td.innerText.trim()
        );
        return {
          rank: cells[0] || "",
          keyword: cells[1] || "",
          popularity: cells[2] || "",
          popularityChange: cells[3] || "",
          ctr: cells[4] || "",
          cvr: cells[5] || "",
          cpa: cells[6] || "",
        };
      });
    });

    if (!data.length) throw new Error("No data found in table");

    // –û–±—Ä–æ–±–∫–∞
    const processed = data.map((item) => {
      const ctrVal =
        parseFloat(item.ctr.replace("%", "").replace(",", ".")) || 0.01;
      const cpaVal =
        parseFloat(item.cpa.replace(/[^\d.,]/g, "").replace(",", ".")) || 0.01;
      const popChangeVal =
        parseFloat(item.popularityChange.replace("%", "").replace(",", ".")) ||
        0;
      const score = popChangeVal * (cpaVal / ctrVal);
      return { ...item, contentGapScore: Number(score.toFixed(2)) };
    });

    return processed.sort((a, b) => b.contentGapScore - a.contentGapScore);
  } catch (e) {
    console.error("‚ùå Error during scraping:", e);
    return [];
  } finally {
    if (browser) await browser.close();
    activeScrapes--;
    await cleanupTempFiles();
  }
}

async function scrapeTikTokHashtagInsights(period = 30) {
  if (activeScrapes >= MAX_CONCURRENT_SCRAPES)
    throw new Error("Too many concurrent scrapes.");
  activeScrapes++;
  let browser;
  try {
    browser = await chromium.launch({
      headless: false,
      args: ["--no-sandbox"],
    });
    const page = await browser.newPage();

    console.log("üåê Opening TikTok Hashtag Page...");
    await page.goto(
      "https://ads.tiktok.com/business/creativecenter/inspiration/popular/hashtag/pc/en",
      {
        waitUntil: "domcontentloaded",
        timeout: 120000,
      }
    );

    await page.waitForTimeout(12000);

    console.log(`üü† Selecting period: ${period} days`);
    await page.waitForSelector('[id="hashtagPeriodSelect"]', {
      timeout: 10000,
    });
    await page.click('[id="hashtagPeriodSelect"]');
    await page.waitForTimeout(2000);

    const option = await page.$(`text="Last ${period} days"`);
    if (option) await option.click();
    else console.warn(`‚ö†Ô∏è Period option not found, using default`);

    await page.waitForTimeout(5000);

    for (let i = 0; i < 15; i++) {
      const seeMoreBtn = await page.$(
        "[data-testid=cc_contentArea_viewmore_btn]"
      );
      if (!seeMoreBtn) break;
      if ((await seeMoreBtn.isVisible()) && (await seeMoreBtn.isEnabled())) {
        await seeMoreBtn.click();
        await page.waitForTimeout(4000);
      } else break;
    }

    for (let i = 0; i < 10; i++) {
      const prevHeight = await page.evaluate(() => document.body.scrollHeight);
      await page.evaluate(() => window.scrollTo(0, document.body.scrollHeight));
      await page.waitForTimeout(3000);
      const newHeight = await page.evaluate(() => document.body.scrollHeight);
      if (newHeight === prevHeight) break;
    }

    return await page.evaluate(() => {
      const results = [];
      document
        .querySelectorAll('a[class*="container"]')
        .forEach((card, idx) => {
          const rankEl = card.querySelector('span[class*="rankingIndex"]');
          const nameEl = card.querySelector('span[class*="titleText"]');
          let posts = 0;
          const postTextEl = Array.from(card.querySelectorAll("*")).find((el) =>
            /posts$/i.test(el.textContent.trim())
          );
          if (postTextEl) {
            let text = postTextEl.textContent
              .trim()
              .toUpperCase()
              .replace(/\s+/g, "")
              .replace("POSTS", "");
            if (text.endsWith("K")) posts = parseFloat(text) * 1000;
            else if (text.endsWith("M")) posts = parseFloat(text) * 1e6;
            else if (text.endsWith("B")) posts = parseFloat(text) * 1e9;
            else posts = parseInt(text, 10) || 0;
          }
          const rank = rankEl
            ? parseInt(rankEl.textContent.trim(), 10)
            : idx + 1;
          const hashtag = nameEl
            ? nameEl.textContent.trim().replace(/^#/, "")
            : "";
          if (hashtag)
            results.push({ rank, hashtag, posts: Math.round(posts) });
        });
      return results;
    });
  } catch (e) {
    console.error("‚ùå Error scraping hashtags:", e);
    return [];
  } finally {
    if (browser) await browser.close();
    activeScrapes--;
    await cleanupTempFiles();
  }
}

async function scrapePopularMusic(region = "United States", time = 30) {
  if (activeScrapes >= MAX_CONCURRENT_SCRAPES)
    throw new Error("Too many concurrent scrapes.");
  activeScrapes++;
  let browser;
  try {
    browser = await chromium.launch({ headless: false });
    const page = await browser.newPage();

    console.log("üåê Opening TikTok Music Page...");
    await page.goto(
      "https://ads.tiktok.com/business/creativecenter/inspiration/popular/music/pc/en",
      {
        waitUntil: "domcontentloaded",
        timeout: 120000,
      }
    );
    await page.waitForTimeout(8000);

    console.log("üü† Selecting region...");
    const regionTrigger = await page.$(
      "div[class*=index-mobile_locationSelectContainer]"
    );
    if (regionTrigger) {
      await regionTrigger.click();
      await page.waitForTimeout(2000);
      await page.fill(
        'input[placeholder="Start typing or select from the list"]',
        region
      );
      await page.keyboard.press("ArrowDown");
      await page.keyboard.press("Enter");
      console.log(`‚úÖ Region set to ${region}`);
    } else console.warn("‚ö†Ô∏è Region dropdown not found.");

    await page.waitForTimeout(5000);

    await selectTime(page, time);

    for (let i = 0; i < 15; i++) {
      const seeMoreBtn = await page.$(
        '[data-testid="cc_contentArea_viewmore_btn"]>div'
      );
      if (
        seeMoreBtn &&
        (await seeMoreBtn.isVisible()) &&
        (await seeMoreBtn.isEnabled())
      ) {
        await seeMoreBtn.click();
        await page.waitForTimeout(4000);
      }
      await page.evaluate(() => window.scrollTo(0, document.body.scrollHeight));
      await page.waitForTimeout(3000);
    }

    return await page.evaluate(() => {
      const results = [];
      document
        .querySelectorAll('div[class*="cardWrapper"]')
        .forEach((card, idx) => {
          const rank =
            parseInt(
              card
                .querySelector('span[class*="rankingIndex"]')
                ?.textContent.trim()
            ) || idx + 1;
          const song =
            card
              .querySelector('span[class*="musicName"]')
              ?.textContent.trim() || "";
          const artist =
            card
              .querySelector('span[class*="autherName"]')
              ?.textContent.trim() || "";
          if (song && artist) results.push({ rank, song, artist });
        });
      return results;
    });
  } catch (e) {
    console.error("‚ùå Error scraping music:", e);
    return [];
  } finally {
    if (browser) await browser.close();
    activeScrapes--;
    await cleanupTempFiles();
  }
}

async function selectTime(page, time) {
  console.log(`üü† Selecting time: Last ${time} days`);
  try {
    await page.waitForSelector('[data-testid="cc_single_select_undefined"]', {
      timeout: 10000,
    });
    await page.click('[data-testid="cc_single_select_undefined"]');
    await page.waitForTimeout(2000);
    let option = await page.$(`text="Last ${time} Days"`);
    if (!option) option = await page.$('[data-option-id="SelectOption82"]');
    if (option) await option.click();
  } catch (e) {
    console.warn("‚ö†Ô∏è Time selector error:", e);
  }
  await page.waitForTimeout(3000);
}

// ==============================
// STATE-BASED HANDLERS
// ==============================

async function handleKeywordPeriod(chatId, text) {
  const period = parseInt(text, 10);
  if (!isValidPeriod(period)) {
    await bot.sendMessage(chatId, "‚ùó –í–∫–∞–∂—ñ—Ç—å –ª–∏—à–µ 7, 30 –∞–±–æ 120:");
    return false;
  }
  userStates[chatId] = { periodForKeyword: period, waitingForKeyword: true };
  await bot.sendMessage(chatId, "üî§ –í–≤–µ–¥—ñ—Ç—å –∫–ª—é—á–æ–≤–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ—à—É–∫—É:");
  return true;
}

async function handleKeywordSearch(chatId, keyword) {
  const period = userStates[chatId]?.periodForKeyword || 7;
  userStates[chatId] = {}; // –û—á–∏—Å—Ç–∏—Ç–∏ —Å—Ç–∞–Ω

  await bot.sendMessage(
    chatId,
    `üîé –®—É–∫–∞—é –∑–∞ –∫–ª—é—á–æ–≤–∏–º —Å–ª–æ–≤–æ–º: "${keyword}" –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ ${period} –¥–Ω—ñ–≤... –¶–µ –º–æ–∂–µ –∑–∞–π–Ω—è—Ç–∏ 30-60 —Å–µ–∫—É–Ω–¥.`
  );

  const results = await scrapeTikTokKeywordInsights(keyword, period);

  
if (!results.length) {
    await bot.sendMessage(
      chatId,
      `‚ö†Ô∏è Creative Center –Ω–µ –∑–Ω–∞–π—à–æ–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –¥–ª—è: "${keyword}".`
    );

    // GPT fallback
    const gpt = await openai.chat.completions.create({
      model: "gpt-3.5-turbo",
      messages: [
        {
          role: "system",
          content:
            `–¢–∏ TikTok-–µ–∫—Å–ø–µ—Ä—Ç. –ó–≥–µ–Ω–µ—Ä—É–π 7 –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω–∏—Ö —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏—Ö —Ö–µ—à—Ç–µ–≥—ñ–≤ ` +
            `–∑ content gap —É –Ω—ñ—à—ñ "${keyword}". –í—ñ–¥–ø–æ–≤—ñ–¥—å —á–µ—Ä–µ–∑ –∫–æ–º—É.`,
        },
      ],
      max_tokens: 100,
    });

    const raw = gpt.choices[0].message.content;
    const tags = raw
      .split(",")
      .map((h) => h.replace("#", "").trim())
      .filter(Boolean)
      .slice(0, 7);

    if (!tags.length) {
      await bot.sendMessage(chatId, "‚ö†Ô∏è GPT –Ω–µ –∑–º—ñ–≥ –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ —Ö–µ—à—Ç–µ–≥–∏.");
      return;
    }

    userStates[chatId] = {
      waitingForKeywordPick: true,
      keywordsList: tags,
    };

    await bot.sendMessage(
      chatId,
      `üß† –ü—Ä–æ–ø–æ–Ω—É—é —Ü—ñ —Ö–µ—à—Ç–µ–≥–∏:
${tags.map((h,i)=>`${i+1}. #${h}`).join("\n")}`
    );
    await bot.sendMessage(chatId, "‚úèÔ∏è –í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä (1‚Äì7) –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —ñ–¥–µ—ó:");
    return;
}


  await bot.sendMessage(
    chatId,
    "‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ –¥–∞–Ω—ñ –≤ Creative Center:\n\n" + formatTable(results)
  );

  userStates[chatId] = {
    waitingForKeywordPick: true,
    keywordsList: results.slice(0, 5).map((i) => i.keyword),
  };

  await bot.sendMessage(
    chatId,
    "‚úèÔ∏è –í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –∑ —Ç–∞–±–ª–∏—Ü—ñ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —ñ–¥–µ—ó (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥ 1 –∞–±–æ 2):"
  );
}

async function handleKeywordPick(chatId, text) {
  const selected = parseInt(text, 10);
  const keywords = userStates[chatId]?.keywordsList || [];

  if (!selected || selected < 1 || selected > keywords.length) {
    await bot.sendMessage(
      chatId,
      "‚ùó –í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —ñ–∑ —Ç–∞–±–ª–∏—Ü—ñ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥ 1 –∞–±–æ 2):"
    );
    return;
  }

  const keyword = keywords[selected - 1];
  userStates[chatId] = {};

  await bot.sendMessage(chatId, `üß† –ì–µ–Ω–µ—Ä—É—é GPT-—ñ–¥–µ—é –¥–ª—è: "${keyword}"...`);

  const prompt = `
–¢–µ–º–∞: "${keyword}"
1Ô∏è‚É£ üìå –°–ª–æ–≤–æ
2Ô∏è‚É£ üé• –°—Ü–µ–Ω–∞—Ä—ñ–π
3Ô∏è‚É£ üìä –ß–æ–º—É —Ü–µ —Å–ø—Ä–∞—Ü—é—î
4Ô∏è‚É£ üè∑Ô∏è 5-7 —Ö–µ—à—Ç–µ–≥—ñ–≤ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é
`;

  const gptResponse = await openai.chat.completions.create({
    model: "gpt-3.5-turbo",
    messages: [
      {
        role: "system",
        content:
          "–¢–∏ –¥–æ—Å–≤—ñ–¥—á–µ–Ω–∏–π –º–∞—Ä–∫–µ—Ç–æ–ª–æ–≥ —ñ TikTok-–∫—Ä–µ–∞—Ç–æ—Ä. –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é.",
      },
      { role: "user", content: prompt },
    ],
    max_tokens: 500,
  });

  await bot.sendMessage(chatId, gptResponse.choices[0].message.content);
}

async function handleHashtagPeriod(chatId, text) {
  const period = parseInt(text, 10);
  if (!isValidPeriod(period)) {
    await bot.sendMessage(chatId, "‚ùó –í–∫–∞–∂—ñ—Ç—å 7, 30 –∞–±–æ 120:");
    return false;
  }
  userStates[chatId] = {};
  await bot.sendMessage(chatId, `üîé –ó–±–∏—Ä–∞—é —Ö–µ—à—Ç–µ–≥–∏ –∑–∞ ${period} –¥–Ω—ñ–≤...`);
  const hashtags = await scrapeTikTokHashtagInsights(period);
  await bot.sendMessage(chatId, formatHashtagList(hashtags));
  return true;
}

async function handleTrackRegion(chatId, text) {
  userStates[chatId] = { waitingForPeriodForTracks: true, region: text };
  await bot.sendMessage(
    chatId,
    "‚úèÔ∏è –¢–µ–ø–µ—Ä –≤–∫–∞–∂—ñ—Ç—å –ø–µ—Ä—ñ–æ–¥ (7, 30 –∞–±–æ 120 –¥–Ω—ñ–≤):"
  );
}

async function handleTrackPeriod(chatId, text) {
  const period = parseInt(text, 10);
  if (!isValidPeriod(period)) {
    await bot.sendMessage(chatId, "‚ùó –í–∫–∞–∂—ñ—Ç—å 7, 30 –∞–±–æ 120:");
    return false;
  }
  const region = userStates[chatId]?.region || "United States";
  userStates[chatId] = {};
  await bot.sendMessage(
    chatId,
    `üîé –ó–±–∏—Ä–∞—é –ø–æ–ø—É–ª—è—Ä–Ω—É –º—É–∑–∏–∫—É –∑ ${region} –∑–∞ ${period} –¥–Ω—ñ–≤...`
  );
  const tracks = await scrapePopularMusic(region, period);
  await bot.sendMessage(chatId, formatMusicList(tracks));
  return true;
}

// ==============================
// COMMANDS AND MESSAGES
// ==============================

bot.onText(/\/start/, async (msg) => {
  const chatId = msg.chat.id;
  await bot.sendMessage(
    chatId,
    "‚è≥ –ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞—á–µ–∫–∞–π—Ç–µ 30 —Å–µ–∫—É–Ω–¥ ‚Äî —Å–µ—Ä–≤—ñ—Å –∑–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è..."
  );
  userStates[chatId] = {};
  await bot.sendMessage(
    chatId,
    `–ü—Ä–∏–≤—ñ—Ç! –Ø TikTok-–∞–Ω–∞–ª—ñ—Ç–∏—á–Ω–∏–π –±–æ—Ç.

–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π:
/start - –∑–∞–ø—É—Å—Ç–∏—Ç–∏ —á–∞—Ç–±–æ—Ç
/keywords - –ø–æ—à—É–∫ —ñ–¥–µ–π –∑–∞ –∫–ª—é—á–æ–≤–∏–º —Å–ª–æ–≤–æ–º
/hashtags - —Ç—Ä–µ–Ω–¥–æ–≤—ñ —Ö–µ—à—Ç–µ–≥–∏
/tracks - –ø–æ–ø—É–ª—è—Ä–Ω–∞ –º—É–∑–∏–∫–∞

–í–∫–∞–∂–∏ –∫–æ–º–∞–Ω–¥—É –¥–ª—è –ø–æ—á–∞—Ç–∫—É.`
  );
});

bot.onText(/\/keywords/, async (msg) => {
  const chatId = msg.chat.id;
  userStates[chatId] = {};
  await bot.sendMessage(
    chatId,
    "–í–∫–∞–∂—ñ—Ç—å –ø–µ—Ä—ñ–æ–¥ –¥–ª—è –ø–æ—à—É–∫—É –∫–ª—é—á–æ–≤–∏—Ö —Å–ª—ñ–≤ (7, 30, 120 –¥–Ω—ñ–≤):"
  );
  userStates[chatId].waitingForPeriodForKeyword = true;
});

bot.onText(/\/hashtags/, async (msg) => {
  const chatId = msg.chat.id;
  userStates[chatId] = {};
  await bot.sendMessage(
    chatId,
    "–í–∫–∞–∂—ñ—Ç—å –ø–µ—Ä—ñ–æ–¥ –¥–ª—è —Ö–µ—à—Ç–µ–≥—ñ–≤ (7, 30, 120 –¥–Ω—ñ–≤):"
  );
  userStates[chatId].waitingForPeriodForHashtags = true;
});

bot.onText(/\/tracks/, async (msg) => {
  const chatId = msg.chat.id;
  userStates[chatId] = {};
  await bot.sendMessage(
    chatId,
    "–í–∫–∞–∂—ñ—Ç—å —Ä–µ–≥—ñ–æ–Ω (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, United States, Ukraine, Russia):"
  );
  userStates[chatId].waitingForRegionForTracks = true;
});

bot.on("message", async (msg) => {
  const chatId = msg.chat.id;
  const text = (msg.text || "").trim();

  if (!text || text.startsWith("/")) return; // Ignore commands here

  const state = userStates[chatId] || {};

  try {
    if (state.waitingForPeriodForKeyword) {
      if (await handleKeywordPeriod(chatId, text)) return;
    }
    if (state.waitingForKeyword) {
      await handleKeywordSearch(chatId, text);
      return;
    }
    if (state.waitingForKeywordPick) {
      await handleKeywordPick(chatId, text);
      return;
    }
    if (state.waitingForPeriodForHashtags) {
      if (await handleHashtagPeriod(chatId, text)) return;
    }
    if (state.waitingForRegionForTracks) {
      await handleTrackRegion(chatId, text);
      return;
    }
    if (state.waitingForPeriodForTracks) {
      if (await handleTrackPeriod(chatId, text)) return;
    }
  } catch (e) {
    console.error("‚ùå Error handling message:", e);
    await bot.sendMessage(chatId, "‚ö†Ô∏è –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.");
  }
});
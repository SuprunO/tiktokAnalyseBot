const { chromium } = require('playwright');
const TelegramBot = require('node-telegram-bot-api');
const OpenAI = require('openai');
const express = require('express');
require('dotenv').config();

const TELEGRAM_TOKEN = process.env.TELEGRAM_TOKEN;
const OPENAI_KEY = process.env.OPENAI_API_KEY;
const RENDER_EXTERNAL_URL = process.env.RENDER_EXTERNAL_URL;
const PORT = process.env.PORT || 3000;


console.log('ENV:', {
  TELEGRAM_TOKEN,
  OPENAI_KEY,
  RENDER_EXTERNAL_URL,
  PORT
});

if (!TELEGRAM_TOKEN || !OPENAI_KEY) {
  console.error('‚ùó Please set TELEGRAM_TOKEN and OPENAI_API_KEY in .env');
  process.exit(1);
}

const openai = new OpenAI({
  apiKey: OPENAI_KEY
});

// ==============================
//  TELEGRAM BOT
// ==============================

let bot;
if (RENDER_EXTERNAL_URL) {
  // Render deployment - Webhook
  bot = new TelegramBot(TELEGRAM_TOKEN, { polling: false });
  bot.setWebHook(`${RENDER_EXTERNAL_URL}/bot${TELEGRAM_TOKEN}`).then(() =>
    console.log(`‚úÖ Webhook set to ${RENDER_EXTERNAL_URL}/bot${TELEGRAM_TOKEN}`)
  );

  const app = express();
  app.use(express.json());

  app.get('/', (req, res) => res.send('Bot is running.'));
  app.post(`/bot${TELEGRAM_TOKEN}`, (req, res) => {
    bot.processUpdate(req.body);
    res.sendStatus(200);
  });

  app.listen(PORT, () => console.log(`üöÄ Express server on ${PORT}`));
} else {
  // Local polling
  bot = new TelegramBot(TELEGRAM_TOKEN, { polling: true });
  console.log('‚úÖ Bot running in polling mode.');
}

// ==============================
//  SCRAPER FUNCTION
// ==============================
async function scrapeTikTokKeywordInsights(keyword) {
  const browser = await chromium.launch({
    headless: false,
    args: ['--no-sandbox', '--disable-dev-shm-usage']
  });

  const page = await browser.newPage();

  await page.goto('https://ads.tiktok.com/business/creativecenter/keyword-insights/pc/en', {
    waitUntil: 'networkidle'
  });

  await page.waitForTimeout(10000);
  await page.fill('input[placeholder="Search by keyword"]', keyword);
  await page.click('[data-testid="cc_commonCom_autoComplete_seach"]');

  await page.waitForSelector('.byted-Table-Body', { timeout: 20000 });

  const data = await page.evaluate(() => {
    const tableBody = document.querySelector('.byted-Table-Body');
    if (!tableBody) return [];

    const rows = Array.from(tableBody.querySelectorAll('tr'));
    return rows.map(row => {
      const cells = Array.from(row.querySelectorAll('td')).map(td => td.innerText.trim());
      return {
        rank: cells[0] || '',
        keyword: cells[1] || '',
        popularity: cells[2] || '',
        popularityChange: cells[3] || '',
        ctr: cells[4] || '',
        cvr: cells[5] || '',
        cpa: cells[6] || ''
      };
    });
  });

  await browser.close();

  data.forEach(item => {
    const ctrVal = parseFloat(item.ctr.replace('%', '').replace(',', '.')) || 0.01;
    const cpaVal = parseFloat(item.cpa.replace(/[^\d.,]/g, '').replace(',', '.')) || 0.01;
    const popChangeVal = parseFloat(item.popularityChange.replace('%', '').replace(',', '.')) || 0;
    const score = popChangeVal * (cpaVal / ctrVal);
    item.contentGapScore = Number(score.toFixed(2));
  });

  data.sort((a, b) => b.contentGapScore - a.contentGapScore);
  return data;
}

// ==============================
//  FORMATTING FUNCTIONS
// ==============================
function formatTable(data) {
  if (!data.length) return '‚ùó –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö —É Creative Center.';

  return data.map((item, idx) => 
    `#${idx + 1}\n` +
    `–°–ª–æ–≤–æ: ${item.keyword}\n` +
    `–†–∞–Ω–≥: ${item.rank}\n` +
    `–ü–æ–ø—É–ª—è—Ä–Ω—ñ—Å—Ç—å: ${item.popularity}\n` +
    `–ó–º—ñ–Ω–∞ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—ñ: ${item.popularityChange}\n` +
    `CTR: ${item.ctr}\n` +
    `CVR: ${item.cvr}\n` +
    `CPA: ${item.cpa}\n` +
    `Content Gap Score: ${item.contentGapScore}\n`
  ).join('\n');
}

function makeGPTPrompt(keyword, topN) {
  const rowsText = topN.map((item, idx) => `
#${idx + 1}
–ö–ª—é—á–æ–≤–µ —Å–ª–æ–≤–æ: ${item.keyword}
–†–∞–Ω–≥: ${item.rank}
–ü–æ–ø—É–ª—è—Ä–Ω—ñ—Å—Ç—å: ${item.popularity}
–ó–º—ñ–Ω–∞ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—ñ: ${item.popularityChange}
CTR: ${item.ctr}
CVR: ${item.cvr}
CPA: ${item.cpa}
Content Gap Score: ${item.contentGapScore}
`.trim()).join('\n\n');

  return `
–¢–∏ –¥–æ—Å–≤—ñ–¥—á–µ–Ω–∏–π –º–∞—Ä–∫–µ—Ç–æ–ª–æ–≥-–∞–Ω–∞–ª—ñ—Ç–∏–∫ —ñ —Å—Ü–µ–Ω–∞—Ä–∏—Å—Ç –¥–ª—è TikTok Ads. –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é.

–î–ª—è –∫–æ–∂–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É –∑—Ä–æ–±–∏ –¥—É–∂–µ –¥–µ—Ç–∞–ª—å–Ω–∏–π —ñ –∑—Ä–æ–∑—É–º—ñ–ª–∏–π —Ä–æ–∑–±—ñ—Ä. –§–æ—Ä–º–∞—Ç:

1Ô∏è‚É£ üìå –°–ª–æ–≤–æ
2Ô∏è‚É£ üìä –ê–Ω–∞–ª—ñ–∑ –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤ –∑ –ø–æ—è—Å–Ω–µ–Ω–Ω—è–º
3Ô∏è‚É£ üé• –°—Ü–µ–Ω–∞—Ä—ñ–π –¥–ª—è 1-—Ö–≤–∏–ª–∏–Ω–Ω–æ–≥–æ –≤—ñ–¥–µ–æ
4Ô∏è‚É£ üè∑Ô∏è –ü—Ä–æ–ø–æ–∑–∏—Ü—ñ—è —Ö–µ—à—Ç–µ–≥—ñ–≤ –∑ –ø–æ—è—Å–Ω–µ–Ω–Ω—è–º

–û—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏:
${rowsText}
`;
}

// ==============================
//  BOT LOGIC
// ==============================
bot.onText(/\/start/, (msg) => {
  bot.sendMessage(msg.chat.id, '–ü—Ä–∏–≤—ñ—Ç! –ù–∞–¥—ñ—à–ª–∏ –º–µ–Ω—ñ —Å–ª–æ–≤–æ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É –∑ TikTok Creative Center.');
});

bot.on('message', async (msg) => {
  const chatId = msg.chat.id;
  const text = msg.text?.trim();

  if (!text || text.startsWith('/start')) return;

  await bot.sendMessage(chatId, `üîé –®—É–∫–∞—é –∑–∞ –∑–∞–ø–∏—Ç–æ–º: "${text}"... –¶–µ –º–æ–∂–µ –∑–∞–π–Ω—è—Ç–∏ 30-60 —Å–µ–∫—É–Ω–¥.`);

  try {
    const results = await scrapeTikTokKeywordInsights(text);

    if (!results.length) {
      // GPT fallback
      await bot.sendMessage(chatId, '‚ùó –£ Creative Center –Ω–µ–º–∞—î –¥–∞–Ω–∏—Ö. –ì–µ–Ω–µ—Ä—É—é —ñ–¥–µ—é –∑ GPT...');
      const fallbackPrompt = `
–¢–µ–º–∞: "${text}"
1Ô∏è‚É£ üìå –°–ª–æ–≤–æ
2Ô∏è‚É£ üé• –°—Ü–µ–Ω–∞—Ä—ñ–π (–≤–∞—É-–µ—Ñ–µ–∫—Ç, —Å—é–∂–µ—Ç, CTA)
3Ô∏è‚É£ üìä –ß–æ–º—É —Ü–µ —Å–ø—Ä–∞—Ü—é—î
4Ô∏è‚É£ üè∑Ô∏è 5-7 —Ö–µ—à—Ç–µ–≥—ñ–≤ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é
`;

      const fallbackResponse = await openai.chat.completions.create({
        model: 'gpt-3.5-turbo',
        messages: [
          { role: 'system', content: '–¢–∏ –¥–æ—Å–≤—ñ–¥—á–µ–Ω–∏–π –º–∞—Ä–∫–µ—Ç–æ–ª–æ–≥ —ñ TikTok-–∫—Ä–µ–∞—Ç–æ—Ä. –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é.' },
          { role: 'user', content: fallbackPrompt }
        ]
      });

      return bot.sendMessage(chatId, fallbackResponse.choices[0].message.content);
    }

    // Send table first
    await bot.sendMessage(chatId, '‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ –¥–∞–Ω—ñ. –û—Å—å —Ç–∞–±–ª–∏—Ü—è:\n\n' + formatTable(results.slice(0, 5)));

    // GPT analysis
    await bot.sendMessage(chatId, 'üí¨ –ê–Ω–∞–ª—ñ–∑—É—é –∑ GPT...');
    const topN = results.slice(0, Math.min(5, results.length));
    const gptPrompt = makeGPTPrompt(text, topN);

    const completion = await openai.chat.completions.create({
      model: 'gpt-3.5-turbo',
      messages: [
        { role: 'system', content: '–¢–∏ –¥–æ—Å–≤—ñ–¥—á–µ–Ω–∏–π –º–∞—Ä–∫–µ—Ç–æ–ª–æ–≥ —ñ —Å—Ü–µ–Ω–∞—Ä–∏—Å—Ç TikTok Ads. –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é.' },
        { role: 'user', content: gptPrompt }
      ]
    });

    await bot.sendMessage(chatId, completion.choices[0].message.content);

  } catch (err) {
    console.error(err);
    await bot.sendMessage(chatId, '‚ùó –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑ –ø—ñ–∑–Ω—ñ—à–µ.');
  }
});
